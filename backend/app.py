from flask import Flask, request, redirect, session
import cohere, requests, os, json
from dotenv import load_dotenv
from urllib.parse import quote

app = Flask(__name__)

SPOTIFY_CLIENT_ID = os.environ.get('CLIENT_ID')

SPOTIFY_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')

SPOTIFY_AUTH_URL = 'https://accounts.spotify.com/authorize'
SPOTIFY_TOKEN_URL = 'https://accounts.spotify.com/api/token'

SPOTIFY_REDIRECT_URI = 'http://localhost:5000/authorize-spotify'
SPOTIFY_SCOPES = 'playlist-modify-private playlist-modify-public'
SPOTIFY_SHOW_DIALOG = 'true'

app.config['SECRET_KEY'] = 'P+A4EHVAH'

spotify_auth_query_params = {
    'response_type': 'code',
    'redirect_uri': SPOTIFY_REDIRECT_URI,
    'scope': SPOTIFY_SCOPES,
    'show_dialog': SPOTIFY_SHOW_DIALOG,
    'client_id': SPOTIFY_CLIENT_ID
}

load_dotenv()

@app.route('/')
def get_song():

    titles = ["Telephone", "Telecommunication", "I Want to Hold Your Hand"]
    artists = ["Lady Gaga", "Herbie Hancock", "The Beatles"]

    session["titles"] = titles
    session["artists"] = artists

    url_args = "&".join(["{}={}".format(key, quote(val)) for key, val in spotify_auth_query_params.items()])
    auth_url = "{}/?{}".format(SPOTIFY_AUTH_URL, url_args)
    return redirect(auth_url)

    

@app.route('/authorize-spotify')
def authorize():
    song_ids = []
    titles = session.get("titles")
    artists = session.get("artists")

    auth_token = request.args['code']
    code_payload = {
        'grant_type': 'authorization_code',
        'code': str(auth_token),
        'redirect_uri': SPOTIFY_REDIRECT_URI,
        'client_id': SPOTIFY_CLIENT_ID,
        'client_secret': SPOTIFY_CLIENT_SECRET,
    }
    post_request = requests.post(SPOTIFY_TOKEN_URL, data = code_payload)
    response_data = json.loads(post_request.text)
    access_token = response_data['access_token']
    refresh_token = response_data['refresh_token']
    token_type = response_data['token_type']
    expires_in = response_data['expires_in']

    authorization_header = {'Authorization': 'Bearer {}'.format(access_token), 'Content-Type': "application/json"}

    for i, title in enumerate(titles):
        response = requests.get("https://api.spotify.com/v1/search?q=" + quote(title) + r"%20artist:" + quote(artists[i]) + "&type=track&limit=1&offset=0", headers = authorization_header)
        res_json = response.json()
        if 'items' in res_json['tracks'] and len(res_json['tracks']['items']) > 0:
            song_ids.append("spotify:track:" +  res_json['tracks']['items'][0]['id'])
        else:
            print(res_json)

    user_profile_api_endpoint = "https://api.spotify.com/v1/me"
    profile_response = requests.get(user_profile_api_endpoint, headers = authorization_header)
    profile_data = profile_response.json()
    user_id = profile_data['uri'][13:]

    create_playlist_api_endpoint = f'https://api.spotify.com/v1/users/{user_id}/playlists'
    create_playlist_params = json.dumps({
        'name': "Your Licy",
        'description': 'Generated by Licy Wake Up',
        'public': True
    })
    create_playlist_response = requests.post(create_playlist_api_endpoint, data = create_playlist_params, headers = authorization_header)
    create_playlist_data = create_playlist_response.json()

    playlist_id = create_playlist_data['id']

    add_songs_api_endpoint = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"
    add_songs_params = json.dumps({
        "uris": song_ids
    })
    add_songs_response = requests.post(add_songs_api_endpoint, data = add_songs_params, headers = authorization_header)
    add_songs_data = add_songs_response.json()

    return {"playlist_id": playlist_id}

if __name__ == "__main__":
    app.run(debug=True)